"""
Script t·ª± ƒë·ªông thi·∫øt l·∫≠p Kaggle API v√† t·∫£i dataset
"""

import os
import json
import subprocess
import sys


def setup_kaggle_credentials():
    """
    H∆∞·ªõng d·∫´n c√†i ƒë·∫∑t Kaggle API credentials
    """
    print("\n" + "="*70)
    print("THI·∫æT L·∫¨P KAGGLE API")
    print("="*70 + "\n")
    
    # Ki·ªÉm tra th∆∞ m·ª•c .kaggle
    home_dir = os.path.expanduser("~")
    kaggle_dir = os.path.join(home_dir, ".kaggle")
    kaggle_json = os.path.join(kaggle_dir, "kaggle.json")
    
    if os.path.exists(kaggle_json):
        print("‚úÖ ƒê√£ t√¨m th·∫•y kaggle.json")
        return True
    
    print("‚ö†Ô∏è  Ch∆∞a t√¨m th·∫•y file kaggle.json")
    print("\nüìù H∆Ø·ªöNG D·∫™N L·∫§Y API TOKEN:")
    print("   1. Truy c·∫≠p: https://www.kaggle.com/settings")
    print("   2. Scroll xu·ªëng m·ª•c 'API'")
    print("   3. Click 'Create New Token'")
    print("   4. File kaggle.json s·∫Ω ƒë∆∞·ª£c t·∫£i v·ªÅ")
    print("\nüìÇ Di chuy·ªÉn file kaggle.json ƒë·∫øn:")
    print(f"   {kaggle_dir}/")
    
    print("\n" + "="*70)
    choice = input("\nB·∫°n ƒë√£ c√≥ file kaggle.json ch∆∞a? (y/n): ")
    
    if choice.lower() == 'y':
        print("\nüìù Nh·∫≠p th√¥ng tin Kaggle API:")
        username = input("   Username: ").strip()
        key = input("   Key: ").strip()
        
        # T·∫°o th∆∞ m·ª•c
        os.makedirs(kaggle_dir, exist_ok=True)
        
        # T·∫°o file kaggle.json
        credentials = {
            "username": username,
            "key": key
        }
        
        with open(kaggle_json, 'w') as f:
            json.dump(credentials, f)
        
        # Chmod 600 (ch·ªâ owner ƒë·ªçc/ghi)
        if os.name != 'nt':  # Kh√¥ng ph·∫£i Windows
            os.chmod(kaggle_json, 0o600)
        
        print(f"\n‚úÖ ƒê√£ t·∫°o {kaggle_json}")
        return True
    
    return False


def download_dataset():
    """
    T·∫£i dataset t·ª´ Kaggle
    """
    print("\n" + "="*70)
    print("T·∫¢I DATASET: Fruits Fresh and Rotten")
    print("="*70 + "\n")
    
    dataset_name = "sriramr/fruits-fresh-and-rotten-for-classification"
    output_dir = "data/fruits_fresh_rotten"
    
    print(f"üì¶ Dataset: {dataset_name}")
    print(f"üìÇ Th∆∞ m·ª•c ƒë√≠ch: {output_dir}/")
    print("\n‚è≥ ƒêang t·∫£i... (C√≥ th·ªÉ m·∫•t v√†i ph√∫t)")
    
    try:
        # T·∫°o th∆∞ m·ª•c
        os.makedirs(output_dir, exist_ok=True)
        
        # T·∫£i dataset
        cmd = f"kaggle datasets download -d {dataset_name} -p {output_dir} --unzip"
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("\n‚úÖ T·∫£i th√†nh c√¥ng!")
            return True
        else:
            print(f"\n‚ùå L·ªói: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"\n‚ùå L·ªói: {str(e)}")
        return False


def organize_dataset():
    """
    T·ªï ch·ª©c l·∫°i c·∫•u tr√∫c dataset
    """
    print("\n" + "="*70)
    print("T·ªî CH·ª®C DATASET")
    print("="*70 + "\n")
    
    base_dir = "data/fruits_fresh_rotten"
    
    # Ki·ªÉm tra c·∫•u tr√∫c
    if not os.path.exists(base_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c {base_dir}/")
        return False
    
    # Li·ªát k√™ n·ªôi dung
    print("üìÇ C·∫•u tr√∫c dataset:")
    for root, dirs, files in os.walk(base_dir):
        level = root.replace(base_dir, '').count(os.sep)
        indent = ' ' * 2 * level
        print(f'{indent}{os.path.basename(root)}/')
        
        # Ch·ªâ hi·ªÉn th·ªã 3 file ƒë·∫ßu m·ªói th∆∞ m·ª•c
        subindent = ' ' * 2 * (level + 1)
        for i, file in enumerate(files[:3]):
            print(f'{subindent}{file}')
        if len(files) > 3:
            print(f'{subindent}... v√† {len(files) - 3} files kh√°c')
    
    # ƒê·∫øm s·ªë ·∫£nh
    fresh_count = 0
    rotten_count = 0
    
    for root, dirs, files in os.walk(base_dir):
        if 'fresh' in root.lower():
            fresh_count += len([f for f in files if f.endswith(('.jpg', '.jpeg', '.png'))])
        elif 'rotten' in root.lower() or 'rot' in root.lower():
            rotten_count += len([f for f in files if f.endswith(('.jpg', '.jpeg', '.png'))])
    
    print(f"\nüìä Th·ªëng k√™:")
    print(f"   üçé Fresh: {fresh_count} ·∫£nh")
    print(f"   üçÇ Rotten: {rotten_count} ·∫£nh")
    print(f"   üì¶ T·ªïng: {fresh_count + rotten_count} ·∫£nh")
    
    return True


def main():
    """
    Quy tr√¨nh ho√†n ch·ªânh
    """
    print("\n" + "="*70)
    print("SETUP DATASET - PH√ÇN LO·∫†I TR√ÅI C√ÇY T∆Ø∆†I/H·ªéNG")
    print("="*70)
    
    # B∆∞·ªõc 1: Setup Kaggle
    if not setup_kaggle_credentials():
        print("\n‚ùå C·∫ßn c√≥ Kaggle API token ƒë·ªÉ ti·∫øp t·ª•c!")
        print("   Tham kh·∫£o: DATASET_FRESH_ROTTEN.md")
        return
    
    # B∆∞·ªõc 2: T·∫£i dataset
    if not download_dataset():
        print("\n‚ùå Kh√¥ng th·ªÉ t·∫£i dataset!")
        return
    
    # B∆∞·ªõc 3: T·ªï ch·ª©c dataset
    if not organize_dataset():
        print("\n‚ùå Kh√¥ng th·ªÉ t·ªï ch·ª©c dataset!")
        return
    
    # Ho√†n th√†nh
    print("\n" + "="*70)
    print("‚úÖ HO√ÄN TH√ÄNH!")
    print("="*70)
    
    print("\nüöÄ B√ÇY GI·ªú B·∫†N C√ì TH·ªÇ:")
    print("\n   # Test v·ªõi 1 ·∫£nh")
    print("   python classify_fresh_rotten.py data/fruits_fresh_rotten/train/fresh_apple/apple_0.jpg")
    print("\n   # Test h√†ng lo·∫°t (fresh)")
    print("   python classify_fresh_rotten.py data/fruits_fresh_rotten/train/fresh_apple/ --batch")
    print("\n   # Test h√†ng lo·∫°t (rotten)")
    print("   python classify_fresh_rotten.py data/fruits_fresh_rotten/train/rotten_apple/ --batch")
    
    print("\n" + "="*70 + "\n")


if __name__ == '__main__':
    main()
