"""
Demo ·ª©ng d·ª•ng v·ªõi giao di·ªán ƒë∆°n gi·∫£n
Cho ph√©p ch·ªçn ·∫£nh v√† nh·∫≠n di·ªán tr√°i c√¢y
"""

import os
import sys
import cv2
import tkinter as tk
from tkinter import filedialog, messagebox
from PIL import Image, ImageTk

# Th√™m th∆∞ m·ª•c g·ªëc v√†o path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from utils.image_processing import load_image, extract_all_features, preprocess_image
from utils.data_loader import FRUIT_CLASSES
from src.train_model import FruitClassifier


class FruitRecognizerApp:
    """
    ·ª®ng d·ª•ng GUI ƒë·ªÉ nh·∫≠n di·ªán tr√°i c√¢y
    """
    
    def __init__(self, root):
        self.root = root
        self.root.title("Nh·∫≠n Di·ªán Tr√°i C√¢y - Fruit Recognition")
        self.root.geometry("800x600")
        
        # Bi·∫øn l∆∞u tr·∫°ng th√°i
        self.current_image = None
        self.classifier = None
        self.model_path = 'models/fruit_classifier.pkl'
        
        # T·∫°o giao di·ªán
        self.create_widgets()
        
        # T·∫£i model
        self.load_model()
    
    
    def create_widgets(self):
        """
        T·∫°o c√°c th√†nh ph·∫ßn giao di·ªán
        """
        # Frame ch√≠nh
        main_frame = tk.Frame(self.root, padx=10, pady=10)
        main_frame.pack(fill=tk.BOTH, expand=True)
        
        # Ti√™u ƒë·ªÅ
        title_label = tk.Label(
            main_frame, 
            text="üçé NH·∫¨N DI·ªÜN TR√ÅI C√ÇY QUA ·∫¢NH üçä",
            font=("Arial", 18, "bold"),
            fg="darkgreen"
        )
        title_label.pack(pady=10)
        
        # Frame cho c√°c n√∫t
        button_frame = tk.Frame(main_frame)
        button_frame.pack(pady=10)
        
        # N√∫t ch·ªçn ·∫£nh
        self.btn_select = tk.Button(
            button_frame,
            text="üìÅ Ch·ªçn ·∫£nh",
            command=self.select_image,
            font=("Arial", 12),
            bg="lightblue",
            width=15,
            height=2
        )
        self.btn_select.pack(side=tk.LEFT, padx=5)
        
        # N√∫t nh·∫≠n di·ªán
        self.btn_predict = tk.Button(
            button_frame,
            text="üîç Nh·∫≠n di·ªán",
            command=self.predict_image,
            font=("Arial", 12),
            bg="lightgreen",
            width=15,
            height=2,
            state=tk.DISABLED
        )
        self.btn_predict.pack(side=tk.LEFT, padx=5)
        
        # Frame hi·ªÉn th·ªã ·∫£nh v√† k·∫øt qu·∫£
        display_frame = tk.Frame(main_frame)
        display_frame.pack(fill=tk.BOTH, expand=True, pady=10)
        
        # Frame hi·ªÉn th·ªã ·∫£nh
        image_frame = tk.LabelFrame(display_frame, text="·∫¢nh ƒë·∫ßu v√†o", font=("Arial", 10, "bold"))
        image_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5)
        
        self.image_label = tk.Label(image_frame, text="Ch∆∞a c√≥ ·∫£nh", bg="lightgray")
        self.image_label.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Frame hi·ªÉn th·ªã k·∫øt qu·∫£
        result_frame = tk.LabelFrame(display_frame, text="K·∫øt qu·∫£ nh·∫≠n di·ªán", font=("Arial", 10, "bold"))
        result_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=5)
        
        self.result_text = tk.Text(
            result_frame,
            font=("Arial", 11),
            wrap=tk.WORD,
            state=tk.DISABLED,
            bg="lightyellow"
        )
        self.result_text.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # Th√¥ng tin ph√≠a d∆∞·ªõi
        info_label = tk.Label(
            main_frame,
            text="S·ª≠ d·ª•ng OpenCV v√† Machine Learning ƒë·ªÉ nh·∫≠n di·ªán tr√°i c√¢y",
            font=("Arial", 9),
            fg="gray"
        )
        info_label.pack(pady=5)
    
    
    def load_model(self):
        """
        T·∫£i model ƒë√£ hu·∫•n luy·ªán
        """
        try:
            if os.path.exists(self.model_path):
                self.classifier = FruitClassifier()
                self.classifier.load_model(self.model_path)
                self.update_result("‚úÖ Model ƒë√£ s·∫µn s√†ng!\n\nVui l√≤ng ch·ªçn ·∫£nh ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
            else:
                self.update_result(
                    "‚ö†Ô∏è Ch∆∞a c√≥ model!\n\n"
                    "Vui l√≤ng ch·∫°y main_train.py\n"
                    "ƒë·ªÉ hu·∫•n luy·ªán model tr∆∞·ªõc."
                )
                self.btn_predict.config(state=tk.DISABLED)
        except Exception as e:
            self.update_result(f"‚ùå L·ªói khi t·∫£i model:\n{str(e)}")
    
    
    def select_image(self):
        """
        Ch·ªçn ·∫£nh t·ª´ file
        """
        file_path = filedialog.askopenfilename(
            title="Ch·ªçn ·∫£nh tr√°i c√¢y",
            filetypes=[
                ("Image files", "*.jpg *.jpeg *.png *.bmp"),
                ("All files", "*.*")
            ]
        )
        
        if file_path:
            try:
                # ƒê·ªçc v√† hi·ªÉn th·ªã ·∫£nh
                self.current_image = cv2.imread(file_path)
                if self.current_image is None:
                    raise ValueError("Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh")
                
                self.display_image(self.current_image)
                self.btn_predict.config(state=tk.NORMAL)
                self.update_result("‚úÖ ƒê√£ t·∫£i ·∫£nh th√†nh c√¥ng!\n\nNh·∫•n 'Nh·∫≠n di·ªán' ƒë·ªÉ b·∫Øt ƒë·∫ßu.")
                
            except Exception as e:
                messagebox.showerror("L·ªói", f"Kh√¥ng th·ªÉ ƒë·ªçc ·∫£nh:\n{str(e)}")
    
    
    def display_image(self, cv_image):
        """
        Hi·ªÉn th·ªã ·∫£nh OpenCV tr√™n tkinter
        """
        # Chuy·ªÉn ƒë·ªïi BGR sang RGB
        rgb_image = cv2.cvtColor(cv_image, cv2.COLOR_BGR2RGB)
        
        # Resize ƒë·ªÉ v·ª´a v·ªõi khung hi·ªÉn th·ªã
        height, width = rgb_image.shape[:2]
        max_height = 400
        max_width = 350
        
        scale = min(max_width/width, max_height/height)
        new_width = int(width * scale)
        new_height = int(height * scale)
        
        resized = cv2.resize(rgb_image, (new_width, new_height))
        
        # Chuy·ªÉn sang PIL Image
        pil_image = Image.fromarray(resized)
        tk_image = ImageTk.PhotoImage(pil_image)
        
        # Hi·ªÉn th·ªã
        self.image_label.config(image=tk_image, text="")
        self.image_label.image = tk_image  # Gi·ªØ reference
    
    
    def predict_image(self):
        """
        Nh·∫≠n di·ªán tr√°i c√¢y t·ª´ ·∫£nh
        """
        if self.current_image is None:
            messagebox.showwarning("C·∫£nh b√°o", "Vui l√≤ng ch·ªçn ·∫£nh tr∆∞·ªõc!")
            return
        
        if self.classifier is None:
            messagebox.showerror("L·ªói", "Model ch∆∞a ƒë∆∞·ª£c t·∫£i!")
            return
        
        try:
            # Tr√≠ch xu·∫•t ƒë·∫∑c tr∆∞ng
            features = extract_all_features(self.current_image)
            
            # D·ª± ƒëo√°n
            result = self.classifier.predict_with_probabilities(features)
            
            predicted_class = result['predicted_class']
            fruit_name = FRUIT_CLASSES[predicted_class]
            
            # Hi·ªÉn th·ªã k·∫øt qu·∫£
            result_text = f"üéØ K·∫æT QU·∫¢ NH·∫¨N DI·ªÜN\n\n"
            result_text += f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
            result_text += f"üçé Lo·∫°i tr√°i c√¢y:\n"
            result_text += f"   {fruit_name}\n\n"
            
            if 'probabilities' in result:
                result_text += f"üìä X√°c su·∫•t:\n\n"
                probs = result['probabilities']
                for cls, prob in sorted(probs.items(), key=lambda x: x[1], reverse=True):
                    bar = "‚ñà" * int(prob * 20)
                    result_text += f"{FRUIT_CLASSES[cls][:15]:<15}\n"
                    result_text += f"{bar} {prob:.1%}\n\n"
            
            self.update_result(result_text)
            
            # V·∫Ω k·∫øt qu·∫£ l√™n ·∫£nh
            display_img = self.current_image.copy()
            cv2.putText(
                display_img,
                fruit_name,
                (10, 30),
                cv2.FONT_HERSHEY_SIMPLEX,
                1,
                (0, 255, 0),
                2
            )
            self.display_image(display_img)
            
        except Exception as e:
            messagebox.showerror("L·ªói", f"L·ªói khi nh·∫≠n di·ªán:\n{str(e)}")
            import traceback
            traceback.print_exc()
    
    
    def update_result(self, text):
        """
        C·∫≠p nh·∫≠t text k·∫øt qu·∫£
        """
        self.result_text.config(state=tk.NORMAL)
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(1.0, text)
        self.result_text.config(state=tk.DISABLED)


def main():
    """
    H√†m ch√≠nh ƒë·ªÉ ch·∫°y ·ª©ng d·ª•ng
    """
    root = tk.Tk()
    app = FruitRecognizerApp(root)
    root.mainloop()


if __name__ == '__main__':
    main()
